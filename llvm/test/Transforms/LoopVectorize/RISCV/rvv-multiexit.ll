; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -passes=loop-vectorize \
; RUN: -force-tail-folding-style=data-with-evl \
; RUN: -prefer-predicate-over-epilogue=predicate-else-scalar-epilogue \
; RUN: -mtriple=riscv64 -mattr=+v -S < %s | FileCheck %s --check-prefix=IF-EVL

; RUN: opt -passes=loop-vectorize \
; RUN: -force-tail-folding-style=none \
; RUN: -prefer-predicate-over-epilogue=predicate-else-scalar-epilogue \
; RUN: -mtriple=riscv64 -mattr=+v -S < %s | FileCheck %s --check-prefix=NO-VP

; Test cases to make sure LV & loop versioning can handle loops with
; multiple exiting branches.

; Multiple branches exiting the loop to a unique exit block.
define void @multiple_exits_unique_exit_block(ptr %A, ptr %B, i64 %N) {
; IF-EVL-LABEL: define void @multiple_exits_unique_exit_block(
; IF-EVL-SAME: ptr [[A:%.*]], ptr [[B:%.*]], i64 [[N:%.*]]) #[[ATTR0:[0-9]+]] {
; IF-EVL-NEXT:  entry:
; IF-EVL-NEXT:    [[A2:%.*]] = ptrtoint ptr [[A]] to i64
; IF-EVL-NEXT:    [[B1:%.*]] = ptrtoint ptr [[B]] to i64
; IF-EVL-NEXT:    [[UMIN:%.*]] = call i64 @llvm.umin.i64(i64 [[N]], i64 999)
; IF-EVL-NEXT:    [[TMP0:%.*]] = add nuw nsw i64 [[UMIN]], 1
; IF-EVL-NEXT:    [[TMP1:%.*]] = call i64 @llvm.vscale.i64()
; IF-EVL-NEXT:    [[TMP2:%.*]] = mul i64 [[TMP1]], 4
; IF-EVL-NEXT:    [[TMP3:%.*]] = call i64 @llvm.umax.i64(i64 10, i64 [[TMP2]])
; IF-EVL-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ule i64 [[TMP0]], [[TMP3]]
; IF-EVL-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_MEMCHECK:%.*]]
; IF-EVL:       vector.memcheck:
; IF-EVL-NEXT:    [[TMP4:%.*]] = call i64 @llvm.vscale.i64()
; IF-EVL-NEXT:    [[TMP5:%.*]] = mul i64 [[TMP4]], 4
; IF-EVL-NEXT:    [[TMP6:%.*]] = mul i64 [[TMP5]], 4
; IF-EVL-NEXT:    [[TMP7:%.*]] = sub i64 [[B1]], [[A2]]
; IF-EVL-NEXT:    [[DIFF_CHECK:%.*]] = icmp ult i64 [[TMP7]], [[TMP6]]
; IF-EVL-NEXT:    br i1 [[DIFF_CHECK]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]]
; IF-EVL:       vector.ph:
; IF-EVL-NEXT:    [[TMP8:%.*]] = call i64 @llvm.vscale.i64()
; IF-EVL-NEXT:    [[TMP9:%.*]] = mul i64 [[TMP8]], 4
; IF-EVL-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[TMP0]], [[TMP9]]
; IF-EVL-NEXT:    [[TMP10:%.*]] = icmp eq i64 [[N_MOD_VF]], 0
; IF-EVL-NEXT:    [[TMP11:%.*]] = select i1 [[TMP10]], i64 [[TMP9]], i64 [[N_MOD_VF]]
; IF-EVL-NEXT:    [[N_VEC:%.*]] = sub i64 [[TMP0]], [[TMP11]]
; IF-EVL-NEXT:    [[TMP12:%.*]] = call i64 @llvm.vscale.i64()
; IF-EVL-NEXT:    [[TMP13:%.*]] = mul i64 [[TMP12]], 4
; IF-EVL-NEXT:    br label [[LOOP_HEADER:%.*]]
; IF-EVL:       vector.body:
; IF-EVL-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[LOOP_HEADER]] ]
; IF-EVL-NEXT:    [[TMP14:%.*]] = add i64 [[INDEX]], 0
; IF-EVL-NEXT:    [[TMP15:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP14]]
; IF-EVL-NEXT:    [[TMP16:%.*]] = getelementptr inbounds i32, ptr [[TMP15]], i32 0
; IF-EVL-NEXT:    [[WIDE_LOAD:%.*]] = load <vscale x 4 x i32>, ptr [[TMP16]], align 4
; IF-EVL-NEXT:    [[TMP17:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[TMP14]]
; IF-EVL-NEXT:    [[TMP18:%.*]] = getelementptr inbounds i32, ptr [[TMP17]], i32 0
; IF-EVL-NEXT:    store <vscale x 4 x i32> [[WIDE_LOAD]], ptr [[TMP18]], align 4
; IF-EVL-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], [[TMP13]]
; IF-EVL-NEXT:    [[TMP19:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; IF-EVL-NEXT:    br i1 [[TMP19]], label [[MIDDLE_BLOCK:%.*]], label [[LOOP_HEADER]], !llvm.loop [[LOOP0:![0-9]+]]
; IF-EVL:       middle.block:
; IF-EVL-NEXT:    br label [[SCALAR_PH]]
; IF-EVL:       scalar.ph:
; IF-EVL-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ], [ 0, [[VECTOR_MEMCHECK]] ]
; IF-EVL-NEXT:    br label [[LOOP_HEADER1:%.*]]
; IF-EVL:       loop.header:
; IF-EVL-NEXT:    [[IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[IV_NEXT:%.*]], [[FOR_BODY:%.*]] ]
; IF-EVL-NEXT:    [[COND_0:%.*]] = icmp eq i64 [[IV]], [[N]]
; IF-EVL-NEXT:    br i1 [[COND_0]], label [[EXIT:%.*]], label [[FOR_BODY]]
; IF-EVL:       for.body:
; IF-EVL-NEXT:    [[A_GEP:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[IV]]
; IF-EVL-NEXT:    [[LV:%.*]] = load i32, ptr [[A_GEP]], align 4
; IF-EVL-NEXT:    [[B_GEP:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[IV]]
; IF-EVL-NEXT:    store i32 [[LV]], ptr [[B_GEP]], align 4
; IF-EVL-NEXT:    [[IV_NEXT]] = add nuw i64 [[IV]], 1
; IF-EVL-NEXT:    [[COND_1:%.*]] = icmp ult i64 [[IV_NEXT]], 1000
; IF-EVL-NEXT:    br i1 [[COND_1]], label [[LOOP_HEADER1]], label [[EXIT]], !llvm.loop [[LOOP3:![0-9]+]]
; IF-EVL:       exit:
; IF-EVL-NEXT:    ret void
;
; NO-VP-LABEL: define void @multiple_exits_unique_exit_block(
; NO-VP-SAME: ptr [[A:%.*]], ptr [[B:%.*]], i64 [[N:%.*]]) #[[ATTR0:[0-9]+]] {
; NO-VP-NEXT:  entry:
; NO-VP-NEXT:    [[A2:%.*]] = ptrtoint ptr [[A]] to i64
; NO-VP-NEXT:    [[B1:%.*]] = ptrtoint ptr [[B]] to i64
; NO-VP-NEXT:    [[UMIN:%.*]] = call i64 @llvm.umin.i64(i64 [[N]], i64 999)
; NO-VP-NEXT:    [[TMP0:%.*]] = add nuw nsw i64 [[UMIN]], 1
; NO-VP-NEXT:    [[TMP1:%.*]] = call i64 @llvm.vscale.i64()
; NO-VP-NEXT:    [[TMP2:%.*]] = mul i64 [[TMP1]], 4
; NO-VP-NEXT:    [[TMP3:%.*]] = call i64 @llvm.umax.i64(i64 10, i64 [[TMP2]])
; NO-VP-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ule i64 [[TMP0]], [[TMP3]]
; NO-VP-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_MEMCHECK:%.*]]
; NO-VP:       vector.memcheck:
; NO-VP-NEXT:    [[TMP4:%.*]] = call i64 @llvm.vscale.i64()
; NO-VP-NEXT:    [[TMP5:%.*]] = mul i64 [[TMP4]], 4
; NO-VP-NEXT:    [[TMP6:%.*]] = mul i64 [[TMP5]], 4
; NO-VP-NEXT:    [[TMP7:%.*]] = sub i64 [[B1]], [[A2]]
; NO-VP-NEXT:    [[DIFF_CHECK:%.*]] = icmp ult i64 [[TMP7]], [[TMP6]]
; NO-VP-NEXT:    br i1 [[DIFF_CHECK]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]]
; NO-VP:       vector.ph:
; NO-VP-NEXT:    [[TMP8:%.*]] = call i64 @llvm.vscale.i64()
; NO-VP-NEXT:    [[TMP9:%.*]] = mul i64 [[TMP8]], 4
; NO-VP-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[TMP0]], [[TMP9]]
; NO-VP-NEXT:    [[TMP10:%.*]] = icmp eq i64 [[N_MOD_VF]], 0
; NO-VP-NEXT:    [[TMP11:%.*]] = select i1 [[TMP10]], i64 [[TMP9]], i64 [[N_MOD_VF]]
; NO-VP-NEXT:    [[N_VEC:%.*]] = sub i64 [[TMP0]], [[TMP11]]
; NO-VP-NEXT:    [[TMP12:%.*]] = call i64 @llvm.vscale.i64()
; NO-VP-NEXT:    [[TMP13:%.*]] = mul i64 [[TMP12]], 4
; NO-VP-NEXT:    br label [[LOOP_HEADER:%.*]]
; NO-VP:       vector.body:
; NO-VP-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[LOOP_HEADER]] ]
; NO-VP-NEXT:    [[TMP14:%.*]] = add i64 [[INDEX]], 0
; NO-VP-NEXT:    [[TMP15:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP14]]
; NO-VP-NEXT:    [[TMP16:%.*]] = getelementptr inbounds i32, ptr [[TMP15]], i32 0
; NO-VP-NEXT:    [[WIDE_LOAD:%.*]] = load <vscale x 4 x i32>, ptr [[TMP16]], align 4
; NO-VP-NEXT:    [[TMP17:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[TMP14]]
; NO-VP-NEXT:    [[TMP18:%.*]] = getelementptr inbounds i32, ptr [[TMP17]], i32 0
; NO-VP-NEXT:    store <vscale x 4 x i32> [[WIDE_LOAD]], ptr [[TMP18]], align 4
; NO-VP-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], [[TMP13]]
; NO-VP-NEXT:    [[TMP19:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; NO-VP-NEXT:    br i1 [[TMP19]], label [[MIDDLE_BLOCK:%.*]], label [[LOOP_HEADER]], !llvm.loop [[LOOP0:![0-9]+]]
; NO-VP:       middle.block:
; NO-VP-NEXT:    br label [[SCALAR_PH]]
; NO-VP:       scalar.ph:
; NO-VP-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ], [ 0, [[VECTOR_MEMCHECK]] ]
; NO-VP-NEXT:    br label [[LOOP_HEADER1:%.*]]
; NO-VP:       loop.header:
; NO-VP-NEXT:    [[IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[IV_NEXT:%.*]], [[FOR_BODY:%.*]] ]
; NO-VP-NEXT:    [[COND_0:%.*]] = icmp eq i64 [[IV]], [[N]]
; NO-VP-NEXT:    br i1 [[COND_0]], label [[EXIT:%.*]], label [[FOR_BODY]]
; NO-VP:       for.body:
; NO-VP-NEXT:    [[A_GEP:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[IV]]
; NO-VP-NEXT:    [[LV:%.*]] = load i32, ptr [[A_GEP]], align 4
; NO-VP-NEXT:    [[B_GEP:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[IV]]
; NO-VP-NEXT:    store i32 [[LV]], ptr [[B_GEP]], align 4
; NO-VP-NEXT:    [[IV_NEXT]] = add nuw i64 [[IV]], 1
; NO-VP-NEXT:    [[COND_1:%.*]] = icmp ult i64 [[IV_NEXT]], 1000
; NO-VP-NEXT:    br i1 [[COND_1]], label [[LOOP_HEADER1]], label [[EXIT]], !llvm.loop [[LOOP3:![0-9]+]]
; NO-VP:       exit:
; NO-VP-NEXT:    ret void
;
entry:
  br label %loop.header

loop.header:
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %for.body ]
  %cond.0 = icmp eq i64 %iv, %N
  br i1 %cond.0, label %exit, label %for.body

for.body:
  %A.gep = getelementptr inbounds i32, ptr %A, i64 %iv
  %lv = load i32, ptr %A.gep, align 4
  %B.gep = getelementptr inbounds i32, ptr %B, i64 %iv
  store i32 %lv, ptr %B.gep, align 4
  %iv.next = add nuw i64 %iv, 1
  %cond.1 = icmp ult i64 %iv.next, 1000
  br i1 %cond.1, label %loop.header, label %exit

exit:
  ret void
}


; Multiple branches exiting the loop to different blocks.
define i32 @multiple_exits_multiple_exit_blocks(ptr %A, ptr %B, i64 %N) {
; IF-EVL-LABEL: define i32 @multiple_exits_multiple_exit_blocks(
; IF-EVL-SAME: ptr [[A:%.*]], ptr [[B:%.*]], i64 [[N:%.*]]) #[[ATTR0]] {
; IF-EVL-NEXT:  entry:
; IF-EVL-NEXT:    [[A2:%.*]] = ptrtoint ptr [[A]] to i64
; IF-EVL-NEXT:    [[B1:%.*]] = ptrtoint ptr [[B]] to i64
; IF-EVL-NEXT:    [[UMIN:%.*]] = call i64 @llvm.umin.i64(i64 [[N]], i64 999)
; IF-EVL-NEXT:    [[TMP0:%.*]] = add nuw nsw i64 [[UMIN]], 1
; IF-EVL-NEXT:    [[TMP1:%.*]] = call i64 @llvm.vscale.i64()
; IF-EVL-NEXT:    [[TMP2:%.*]] = mul i64 [[TMP1]], 4
; IF-EVL-NEXT:    [[TMP3:%.*]] = call i64 @llvm.umax.i64(i64 10, i64 [[TMP2]])
; IF-EVL-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ule i64 [[TMP0]], [[TMP3]]
; IF-EVL-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_MEMCHECK:%.*]]
; IF-EVL:       vector.memcheck:
; IF-EVL-NEXT:    [[TMP4:%.*]] = call i64 @llvm.vscale.i64()
; IF-EVL-NEXT:    [[TMP5:%.*]] = mul i64 [[TMP4]], 4
; IF-EVL-NEXT:    [[TMP6:%.*]] = mul i64 [[TMP5]], 4
; IF-EVL-NEXT:    [[TMP7:%.*]] = sub i64 [[B1]], [[A2]]
; IF-EVL-NEXT:    [[DIFF_CHECK:%.*]] = icmp ult i64 [[TMP7]], [[TMP6]]
; IF-EVL-NEXT:    br i1 [[DIFF_CHECK]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]]
; IF-EVL:       vector.ph:
; IF-EVL-NEXT:    [[TMP8:%.*]] = call i64 @llvm.vscale.i64()
; IF-EVL-NEXT:    [[TMP9:%.*]] = mul i64 [[TMP8]], 4
; IF-EVL-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[TMP0]], [[TMP9]]
; IF-EVL-NEXT:    [[TMP10:%.*]] = icmp eq i64 [[N_MOD_VF]], 0
; IF-EVL-NEXT:    [[TMP11:%.*]] = select i1 [[TMP10]], i64 [[TMP9]], i64 [[N_MOD_VF]]
; IF-EVL-NEXT:    [[N_VEC:%.*]] = sub i64 [[TMP0]], [[TMP11]]
; IF-EVL-NEXT:    [[TMP12:%.*]] = call i64 @llvm.vscale.i64()
; IF-EVL-NEXT:    [[TMP13:%.*]] = mul i64 [[TMP12]], 4
; IF-EVL-NEXT:    br label [[LOOP_HEADER:%.*]]
; IF-EVL:       vector.body:
; IF-EVL-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[LOOP_HEADER]] ]
; IF-EVL-NEXT:    [[TMP14:%.*]] = add i64 [[INDEX]], 0
; IF-EVL-NEXT:    [[TMP15:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP14]]
; IF-EVL-NEXT:    [[TMP16:%.*]] = getelementptr inbounds i32, ptr [[TMP15]], i32 0
; IF-EVL-NEXT:    [[WIDE_LOAD:%.*]] = load <vscale x 4 x i32>, ptr [[TMP16]], align 4
; IF-EVL-NEXT:    [[TMP17:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[TMP14]]
; IF-EVL-NEXT:    [[TMP18:%.*]] = getelementptr inbounds i32, ptr [[TMP17]], i32 0
; IF-EVL-NEXT:    store <vscale x 4 x i32> [[WIDE_LOAD]], ptr [[TMP18]], align 4
; IF-EVL-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], [[TMP13]]
; IF-EVL-NEXT:    [[TMP19:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; IF-EVL-NEXT:    br i1 [[TMP19]], label [[MIDDLE_BLOCK:%.*]], label [[LOOP_HEADER]], !llvm.loop [[LOOP4:![0-9]+]]
; IF-EVL:       middle.block:
; IF-EVL-NEXT:    br label [[SCALAR_PH]]
; IF-EVL:       scalar.ph:
; IF-EVL-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ], [ 0, [[VECTOR_MEMCHECK]] ]
; IF-EVL-NEXT:    br label [[LOOP_HEADER1:%.*]]
; IF-EVL:       loop.header:
; IF-EVL-NEXT:    [[IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[IV_NEXT:%.*]], [[FOR_BODY:%.*]] ]
; IF-EVL-NEXT:    [[COND_0:%.*]] = icmp eq i64 [[IV]], [[N]]
; IF-EVL-NEXT:    br i1 [[COND_0]], label [[EXIT_0:%.*]], label [[FOR_BODY]]
; IF-EVL:       for.body:
; IF-EVL-NEXT:    [[A_GEP:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[IV]]
; IF-EVL-NEXT:    [[LV:%.*]] = load i32, ptr [[A_GEP]], align 4
; IF-EVL-NEXT:    [[B_GEP:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[IV]]
; IF-EVL-NEXT:    store i32 [[LV]], ptr [[B_GEP]], align 4
; IF-EVL-NEXT:    [[IV_NEXT]] = add nuw i64 [[IV]], 1
; IF-EVL-NEXT:    [[COND_1:%.*]] = icmp ult i64 [[IV_NEXT]], 1000
; IF-EVL-NEXT:    br i1 [[COND_1]], label [[LOOP_HEADER1]], label [[EXIT_1:%.*]], !llvm.loop [[LOOP5:![0-9]+]]
; IF-EVL:       exit.0:
; IF-EVL-NEXT:    ret i32 1
; IF-EVL:       exit.1:
; IF-EVL-NEXT:    ret i32 2
;
; NO-VP-LABEL: define i32 @multiple_exits_multiple_exit_blocks(
; NO-VP-SAME: ptr [[A:%.*]], ptr [[B:%.*]], i64 [[N:%.*]]) #[[ATTR0]] {
; NO-VP-NEXT:  entry:
; NO-VP-NEXT:    [[A2:%.*]] = ptrtoint ptr [[A]] to i64
; NO-VP-NEXT:    [[B1:%.*]] = ptrtoint ptr [[B]] to i64
; NO-VP-NEXT:    [[UMIN:%.*]] = call i64 @llvm.umin.i64(i64 [[N]], i64 999)
; NO-VP-NEXT:    [[TMP0:%.*]] = add nuw nsw i64 [[UMIN]], 1
; NO-VP-NEXT:    [[TMP1:%.*]] = call i64 @llvm.vscale.i64()
; NO-VP-NEXT:    [[TMP2:%.*]] = mul i64 [[TMP1]], 4
; NO-VP-NEXT:    [[TMP3:%.*]] = call i64 @llvm.umax.i64(i64 10, i64 [[TMP2]])
; NO-VP-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ule i64 [[TMP0]], [[TMP3]]
; NO-VP-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_MEMCHECK:%.*]]
; NO-VP:       vector.memcheck:
; NO-VP-NEXT:    [[TMP4:%.*]] = call i64 @llvm.vscale.i64()
; NO-VP-NEXT:    [[TMP5:%.*]] = mul i64 [[TMP4]], 4
; NO-VP-NEXT:    [[TMP6:%.*]] = mul i64 [[TMP5]], 4
; NO-VP-NEXT:    [[TMP7:%.*]] = sub i64 [[B1]], [[A2]]
; NO-VP-NEXT:    [[DIFF_CHECK:%.*]] = icmp ult i64 [[TMP7]], [[TMP6]]
; NO-VP-NEXT:    br i1 [[DIFF_CHECK]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]]
; NO-VP:       vector.ph:
; NO-VP-NEXT:    [[TMP8:%.*]] = call i64 @llvm.vscale.i64()
; NO-VP-NEXT:    [[TMP9:%.*]] = mul i64 [[TMP8]], 4
; NO-VP-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[TMP0]], [[TMP9]]
; NO-VP-NEXT:    [[TMP10:%.*]] = icmp eq i64 [[N_MOD_VF]], 0
; NO-VP-NEXT:    [[TMP11:%.*]] = select i1 [[TMP10]], i64 [[TMP9]], i64 [[N_MOD_VF]]
; NO-VP-NEXT:    [[N_VEC:%.*]] = sub i64 [[TMP0]], [[TMP11]]
; NO-VP-NEXT:    [[TMP12:%.*]] = call i64 @llvm.vscale.i64()
; NO-VP-NEXT:    [[TMP13:%.*]] = mul i64 [[TMP12]], 4
; NO-VP-NEXT:    br label [[LOOP_HEADER:%.*]]
; NO-VP:       vector.body:
; NO-VP-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[LOOP_HEADER]] ]
; NO-VP-NEXT:    [[TMP14:%.*]] = add i64 [[INDEX]], 0
; NO-VP-NEXT:    [[TMP15:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP14]]
; NO-VP-NEXT:    [[TMP16:%.*]] = getelementptr inbounds i32, ptr [[TMP15]], i32 0
; NO-VP-NEXT:    [[WIDE_LOAD:%.*]] = load <vscale x 4 x i32>, ptr [[TMP16]], align 4
; NO-VP-NEXT:    [[TMP17:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[TMP14]]
; NO-VP-NEXT:    [[TMP18:%.*]] = getelementptr inbounds i32, ptr [[TMP17]], i32 0
; NO-VP-NEXT:    store <vscale x 4 x i32> [[WIDE_LOAD]], ptr [[TMP18]], align 4
; NO-VP-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], [[TMP13]]
; NO-VP-NEXT:    [[TMP19:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; NO-VP-NEXT:    br i1 [[TMP19]], label [[MIDDLE_BLOCK:%.*]], label [[LOOP_HEADER]], !llvm.loop [[LOOP4:![0-9]+]]
; NO-VP:       middle.block:
; NO-VP-NEXT:    br label [[SCALAR_PH]]
; NO-VP:       scalar.ph:
; NO-VP-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ], [ 0, [[VECTOR_MEMCHECK]] ]
; NO-VP-NEXT:    br label [[LOOP_HEADER1:%.*]]
; NO-VP:       loop.header:
; NO-VP-NEXT:    [[IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[IV_NEXT:%.*]], [[FOR_BODY:%.*]] ]
; NO-VP-NEXT:    [[COND_0:%.*]] = icmp eq i64 [[IV]], [[N]]
; NO-VP-NEXT:    br i1 [[COND_0]], label [[EXIT_0:%.*]], label [[FOR_BODY]]
; NO-VP:       for.body:
; NO-VP-NEXT:    [[A_GEP:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[IV]]
; NO-VP-NEXT:    [[LV:%.*]] = load i32, ptr [[A_GEP]], align 4
; NO-VP-NEXT:    [[B_GEP:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[IV]]
; NO-VP-NEXT:    store i32 [[LV]], ptr [[B_GEP]], align 4
; NO-VP-NEXT:    [[IV_NEXT]] = add nuw i64 [[IV]], 1
; NO-VP-NEXT:    [[COND_1:%.*]] = icmp ult i64 [[IV_NEXT]], 1000
; NO-VP-NEXT:    br i1 [[COND_1]], label [[LOOP_HEADER1]], label [[EXIT_1:%.*]], !llvm.loop [[LOOP5:![0-9]+]]
; NO-VP:       exit.0:
; NO-VP-NEXT:    ret i32 1
; NO-VP:       exit.1:
; NO-VP-NEXT:    ret i32 2
;
entry:
  br label %loop.header

loop.header:
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %for.body ]
  %cond.0 = icmp eq i64 %iv, %N
  br i1 %cond.0, label %exit.0, label %for.body

for.body:
  %A.gep = getelementptr inbounds i32, ptr %A, i64 %iv
  %lv = load i32, ptr %A.gep, align 4
  %B.gep = getelementptr inbounds i32, ptr %B, i64 %iv
  store i32 %lv, ptr %B.gep, align 4
  %iv.next = add nuw i64 %iv, 1
  %cond.1 = icmp ult i64 %iv.next, 1000
  br i1 %cond.1, label %loop.header, label %exit.1

exit.0:
  ret i32 1

exit.1:
  ret i32 2
}
;.
; IF-EVL: [[LOOP0]] = distinct !{[[LOOP0]], [[META1:![0-9]+]], [[META2:![0-9]+]]}
; IF-EVL: [[META1]] = !{!"llvm.loop.isvectorized", i32 1}
; IF-EVL: [[META2]] = !{!"llvm.loop.unroll.runtime.disable"}
; IF-EVL: [[LOOP3]] = distinct !{[[LOOP3]], [[META1]]}
; IF-EVL: [[LOOP4]] = distinct !{[[LOOP4]], [[META1]], [[META2]]}
; IF-EVL: [[LOOP5]] = distinct !{[[LOOP5]], [[META1]]}
;.
; NO-VP: [[LOOP0]] = distinct !{[[LOOP0]], [[META1:![0-9]+]], [[META2:![0-9]+]]}
; NO-VP: [[META1]] = !{!"llvm.loop.isvectorized", i32 1}
; NO-VP: [[META2]] = !{!"llvm.loop.unroll.runtime.disable"}
; NO-VP: [[LOOP3]] = distinct !{[[LOOP3]], [[META1]]}
; NO-VP: [[LOOP4]] = distinct !{[[LOOP4]], [[META1]], [[META2]]}
; NO-VP: [[LOOP5]] = distinct !{[[LOOP5]], [[META1]]}
;.
